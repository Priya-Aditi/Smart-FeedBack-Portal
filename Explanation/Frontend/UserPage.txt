import React, { useState, useRef, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import './UserPage.css';
import Profile from './Images/dummy.png';

const dropdownLabels = ['Department', 'Services', 'Events'] as const;
type DropdownLabel = typeof dropdownLabels[number];

const UserPage: React.FC = () => {
  const [selected, setSelected] = useState<string>('Submitted');
  const [category, setCategory] = useState<string>('');
  const [openDropdown, setOpenDropdown] = useState<string | null>(null);
  const [showProfileDropdown, setShowProfileDropdown] = useState<boolean>(false);
  const [userName, setUserName] = useState<string>('');

  const navigate = useNavigate();

  const dropdownRefs: Record<DropdownLabel, React.RefObject<HTMLDivElement | null>> = {
    Department: useRef<HTMLDivElement | null>(null),
    Services: useRef<HTMLDivElement | null>(null),
    Events: useRef<HTMLDivElement | null>(null),
  };

  const profileRef = useRef<HTMLDivElement>(null);

  const handleSelect = (cat: string, option: string) => {
    setCategory(cat);
    setSelected(option);
    setOpenDropdown(null);
  };

  const handleLogout = () => {
    localStorage.clear();
    navigate('/', { replace: true });
  };

  const dummyData: Record<string, { title: string }[]> = {
    Submitted: [
      { title: 'Submitted Feedback 1' }, { title: 'Submitted Feedback 2' },
      { title: 'Submitted Feedback 3' }, { title: 'Submitted Feedback 4' }
    ],
    Pending: [
      { title: 'Pending Feedback 1' }, { title: 'Pending Feedback 2' },
      { title: 'Pending Feedback 3' }, { title: 'Pending Feedback 4' }
    ],
    HR: [{ title: 'HR Feedback A' }, { title: 'HR Feedback B' }],
    Development: [{ title: 'Dev Feedback A' }, { title: 'Dev Feedback B' }],
    AC: [{ title: 'AC Service A' }, { title: 'AC Service B' }],
    Water: [{ title: 'Water Service A' }, { title: 'Water Service B' }],
    FitHit: [{ title: 'FitHit Event Feedback' }, { title: 'Another FitHit Item' }],
    RunForLife: [{ title: 'RunForLife Event Feedback' }, { title: 'Volunteer Details' }],
  };

  const renderDropdown = (label: DropdownLabel, options: string[]) => (
    <div
      className={`custom-dropdown ${openDropdown === label ? 'active' : ''}`}
      ref={dropdownRefs[label]}
    >
      <div
        className={`dropdown-button ${
          openDropdown === label || category === label ? 'active' : ''
        }`}
        onClick={() => setOpenDropdown(openDropdown === label ? null : label)}
      >
        {label}
      </div>
      {openDropdown === label && (
        <div className="dropdown-options">
          {options.map((option) => (
            <div
              key={option}
              className="dropdown-option"
              onClick={() => handleSelect(label, option)}
            >
              {option}
            </div>
          ))}
        </div>
      )}
    </div>
  );

  useEffect(() => {
    const name = localStorage.getItem('userName');
    if (name) {
      setUserName(name);
    }

    const token = localStorage.getItem('token');
    if (!token) {
      navigate('/login', { replace: true });
    }

    const handleClickOutside = (event: MouseEvent) => {
      const target = event.target as Node;
      const clickedOutsideDropdowns = dropdownLabels.every(
        (label) => !dropdownRefs[label].current?.contains(target)
      );
      const clickedOutsideProfile = profileRef.current && !profileRef.current.contains(target);

      if (clickedOutsideDropdowns) {
        setOpenDropdown(null);
      }

      if (clickedOutsideProfile) {
        setShowProfileDropdown(false);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => document.removeEventListener('mousedown', handleClickOutside);
  }, [navigate]);

  return (
    <div className="user-page">
      {/* Navbar */}
      <nav className="navbar">
        <div></div>
        <div className="profile-dropdown" ref={profileRef}>
          <img
            src={Profile}
            alt="User"
            className="user-img"
            onClick={() => setShowProfileDropdown(!showProfileDropdown)}
          />
          {showProfileDropdown && (
            <div className="dropdown-options profile-options">
              <div className="logout-option" onClick={handleLogout}>Logout</div>
            </div>
          )}
        </div>
      </nav>

      {/* Welcome */}
      <div className="welcome-text">Welcome {userName}</div>

      {/* Tabs */}
      <div className="tab-row">
        <div
          className={`tab ${selected === 'Submitted' && category === '' ? 'active' : ''}`}
          onClick={() => handleSelect('', 'Submitted')}
        >
          Submitted Feedback
        </div>
        <div
          className={`tab ${selected === 'Pending' && category === '' ? 'active' : ''}`}
          onClick={() => handleSelect('', 'Pending')}
        >
          Pending
        </div>
        {renderDropdown('Department', ['HR', 'Development'])}
        {renderDropdown('Services', ['AC', 'Water'])}
        {renderDropdown('Events', ['FitHit', 'RunForLife'])}
      </div>

      {/* Content */}
      <div className="content">
        {/* Feedback Section */}
        <div className="feedback-section scrollable-column">
          <h3 className="sticky-heading">
            {category ? `${category}: ${selected}` : selected}
          </h3>
          <div className="feedback-list">
            {(dummyData[selected] || []).map((item, index) => (
              <div className="feedback-card" key={index}>
                <div className="status-dot" />
                <div className="feedback-title">{item.title}</div>
              </div>
            ))}
          </div>
        </div>

        {/* Event Section */}
        <div className="event-section scrollable-column">
          <h3 className="sticky-heading">Upcoming Events</h3>
          <div className="event-list">
            <div className="event-item">üåü FitHit - July 10, 2025</div>
            <div className="event-item">üèÉ RunForLife - Aug 3, 2025</div>
            <div className="event-item">üéâ Wellness Fest - Sept 15, 2025</div>
            <div className="event-item">üì£ Leadership Talk - Oct 21, 2025</div>
            <div className="event-item">üí¨ Hackathon - Nov 11, 2025</div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default UserPage;
üîπ IMPORTS

import React, { useState, useRef, useEffect } from 'react';
import React ‚Äì Imports the core React library.

{ useState, useRef, useEffect } ‚Äì Named imports of React Hooks:

useState ‚Äì Adds state to a component.

useRef ‚Äì Creates references to DOM elements.

useEffect ‚Äì Runs side effects (like lifecycle methods).

import { useNavigate } from 'react-router-dom';
useNavigate ‚Äì A hook from React Router to change pages programmatically.

import './UserPage.css';
Loads the CSS styles for the user page.

import Profile from './Images/dummy.png';
Imports a local image file (dummy user profile picture) to use in JSX.

üîπ CONSTANTS AND TYPES

const dropdownLabels = ['Department', 'Services', 'Events'] as const;
dropdownLabels ‚Äì A fixed array of dropdown labels.

as const ‚Äì Tells TypeScript to treat the array as literal string values (read-only).

type DropdownLabel = typeof dropdownLabels[number];
Creates a union type: 'Department' | 'Services' | 'Events'.

Used to type-check dropdown logic.

üîπ COMPONENT START

const UserPage: React.FC = () => {
Defines a React Functional Component named UserPage.

üîπ STATE HOOKS

const [selected, setSelected] = useState<string>('Submitted');
Stores the currently selected tab or feedback item.

const [category, setCategory] = useState<string>('');
Stores the selected dropdown category (e.g., 'HR', 'AC').

const [openDropdown, setOpenDropdown] = useState<string | null>(null);
Tracks which dropdown menu is currently open.

const [showProfileDropdown, setShowProfileDropdown] = useState<boolean>(false);
Controls visibility of the user profile dropdown (logout option).

const [userName, setUserName] = useState<string>('');
Stores the username (from localStorage).

üîπ NAVIGATION

const navigate = useNavigate();
Hook to navigate between routes/pages.

üîπ DROPDOWN REFERENCES

const dropdownRefs: Record<DropdownLabel, React.RefObject<HTMLDivElement | null>> = {
  Department: useRef(null),
  Services: useRef(null),
  Events: useRef(null),
};
Stores ref objects to detect clicks outside dropdowns.

const profileRef = useRef<HTMLDivElement>(null);
Ref for the user profile image/dropdown, also used to detect clicks outside.

üîπ HELPER FUNCTIONS

const handleSelect = (cat: string, option: string) => {
  setCategory(cat);
  setSelected(option);
  setOpenDropdown(null);
};
Handles dropdown or tab selection.

Updates category and selected, and closes dropdown.

const handleLogout = () => {
  localStorage.clear();
  navigate('/', { replace: true });
};
Logs user out by clearing localStorage and navigating to homepage.

üîπ DUMMY DATA

const dummyData: Record<string, { title: string }[]> = {
  Submitted: [...],
  Pending: [...],
  HR: [...],
  Development: [...],
  ...
};
Fake feedback data mapped by type.

Used to simulate backend data.

üîπ RENDER DROPDOWN FUNCTION

const renderDropdown = (label: DropdownLabel, options: string[]) => (
  ...
);
Dynamically renders a dropdown:

Label (e.g., "Department")

List of options (e.g., "HR", "Development")

Uses conditionals to toggle visibility.

Highlights if active or selected.

üîπ useEffect (Component Side Effects)

useEffect(() => {
Runs once on mount:

const name = localStorage.getItem('userName');
if (name) setUserName(name);
Gets username from local storage.

const token = localStorage.getItem('token');
if (!token) {
  navigate('/login', { replace: true });
}
Redirects to login if no auth token is found.

Click Outside Handler

const handleClickOutside = (event: MouseEvent) => {
  const target = event.target as Node;
Detects if user clicked outside dropdowns or profile.

const clickedOutsideDropdowns = dropdownLabels.every(
  (label) => !dropdownRefs[label].current?.contains(target)
);
Checks if click was outside all dropdowns.

const clickedOutsideProfile = profileRef.current && !profileRef.current.contains(target);
Checks if click was outside profile dropdown.

if (clickedOutsideDropdowns) setOpenDropdown(null);
if (clickedOutsideProfile) setShowProfileDropdown(false);
Closes dropdowns if clicked outside.

document.addEventListener('mousedown', handleClickOutside);
return () => document.removeEventListener('mousedown', handleClickOutside);
Attaches listener on mount, removes on unmount.

üîπ JSX RETURN BLOCK

return (
  <div className="user-page">
Root container with class user-page.

üî∏ NAVBAR

<nav className="navbar">
  <div></div>
Empty left slot (maybe for logo or spacing).

  <div className="profile-dropdown" ref={profileRef}>
    <img
      src={Profile}
      alt="User"
      className="user-img"
      onClick={() => setShowProfileDropdown(!showProfileDropdown)}
    />
User profile image (click to toggle logout menu).

    {showProfileDropdown && (
      <div className="dropdown-options profile-options">
        <div className="logout-option" onClick={handleLogout}>Logout</div>
      </div>
    )}
  </div>
</nav>
Conditionally renders logout option when showProfileDropdown is true.

üî∏ WELCOME MESSAGE

<div className="welcome-text">Welcome {userName}</div>
Greets user using the userName from state.

üî∏ TABS AND DROPDOWNS

<div className="tab-row">
Tab bar with:

<div className={`tab ...`} onClick={() => handleSelect('', 'Submitted')}>
  Submitted Feedback
</div>
A tab that activates if selected === 'Submitted' and no category.

<div className={`tab ...`} onClick={() => handleSelect('', 'Pending')}>
  Pending
</div>
Another tab for Pending.

{renderDropdown('Department', ['HR', 'Development'])}
{renderDropdown('Services', ['AC', 'Water'])}
{renderDropdown('Events', ['FitHit', 'RunForLife'])}
Calls the dropdown render function with options.

üî∏ CONTENT SECTION

<div className="content">
Two columns: feedback and events.

Feedback Section

<div className="feedback-section scrollable-column">
  <h3 className="sticky-heading">
    {category ? `${category}: ${selected}` : selected}
  </h3>
Title reflects current selection.

  <div className="feedback-list">
    {(dummyData[selected] || []).map((item, index) => (
      <div className="feedback-card" key={index}>
        <div className="status-dot" />
        <div className="feedback-title">{item.title}</div>
      </div>
    ))}
  </div>
</div>
Loops through dummyData[selected] and shows each item in a card format.

Event Section

<div className="event-section scrollable-column">
  <h3 className="sticky-heading">Upcoming Events</h3>
  <div className="event-list">
    <div className="event-item">üåü FitHit - July 10, 2025</div>
    ...
  </div>
</div>
Static list of upcoming events.

üîö EXPORT

export default UserPage;
Makes the UserPage component available for import elsewhere.

‚úÖ Summary
This component:

Displays a user dashboard with:

Profile + logout

Tab switching

Dropdown filters (Department, Services, Events)

Feedback list

Event list

Uses:

React hooks for state and lifecycle

React Router for page navigation

CSS for styling

Refs to handle click-outside logic